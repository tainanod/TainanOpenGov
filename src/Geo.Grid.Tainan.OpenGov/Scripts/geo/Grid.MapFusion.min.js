(function (undefined) {

    'use strict';


    var MapFusion = function (cfg, lyrs) {
        var self = this;

        var config = new mapConfigSetup();
        config = extend(config, cfg);

        var fusion = {
            olmap: null,
            config: config,
            baseLayers: {}
        };

        // TGOS電子地圖
        var tgosLayer = createXyzLayer("tgos", getLayerVisible(lyrs, 'tgos'), tgosTileUrlFunction);
        fusion.baseLayers.tgos = tgosLayer;

        // 通用版電子地圖
        var nlscLayer = createWmtsLayer("nlsc", config.mapUrl.nlsc, getLayerVisible(lyrs, 'nlsc'), "EMAP");
        fusion.baseLayers.nlsc = nlscLayer;

        // 通用版正射影像
        var orthoLayer = createWmtsLayer("ortho", config.mapUrl.nlsc, getLayerVisible(lyrs, 'sate'), "PHOTO2");
        fusion.baseLayers.ortho = orthoLayer;

        // OpenStreetMap
        var osmLayer = createOsmLayer('', getLayerVisible(lyrs, 'osm'));
        fusion.baseLayers.osm = osmLayer;

        function getLayerVisible(layers, type) {
            var visible = false;
            var filterd = layers.filter(function (d) { return d.type === type });
            if (filterd.length > 0) {
                visible = filterd[0].active;
            }
            return visible;
        }
        var baseLayers = [
               {
                   type: 'osm',
                   name: 'OSM',
                   group: 'base',
                   active: false,
                   isBaseLayer: true,
                   opacity: 1,
                   source: osmLayer
               }, {
                   type: 'tgos',
                   name: 'TGOS',
                   group: 'base',
                   active: true,
                   isBaseLayer: true,
                   opacity: 1,
                   source: tgosLayer
               }, {
                   type: 'nlsc',
                   name: '通用版',
                   group: 'base',
                   active: false,
                   isBaseLayer: true,
                   opacity: 1,
                   source: nlscLayer
               }, {
                   type: 'sate',
                   name: '航照圖',
                   group: 'base',
                   active: false,
                   isBaseLayer: true,
                   source: orthoLayer
               }
        ];

        function createLayers(opt) {
            var layers = [];
            opt.forEach(function (d) {
                var filterd = baseLayers.filter(function (l) { return l.type === d.type });
                if (filterd.length > 0) {
                    var layer = filterd[0];
                    layer.name = d.name;
                    layer.active = d.active;
                    layers.push(layer);
                }
            });
            return layers;

        }
        config.layers = createLayers(lyrs);

        function layerChangeControl(opts) {

            var options = opts || {};
            var element = document.createElement('div');
            element.className = 'rt-control';

            var createRtButton = function (name, style, evt) {
                var b = document.createElement('button');
                b.type = 'button';
                b.className = 'btn ' + style + ' btn-sm';
                b.innerHTML = name;
                b.style.margin = '2px;';
                b.style.display = 'none';
                b.addEventListener('click', evt, false);
                return b;
            };

            function changeButtonStatus(evt) {
                $('.rt-control button').removeClass('btn-primary').addClass('btn-default');
                $(evt.target).removeClass('btn-default').addClass('btn-primary');
                config.layers.forEach(function (layer) {
                    if (layer.isBaseLayer) {
                        layer.source.setVisible(layer.name === evt.target.innerHTML);
                    }
                });
            }

            config.layers.forEach(function (d) {
                if (d.isBaseLayer) {
                    element.appendChild(
                        createRtButton(d.name, d.active ? 'btn-primary' : 'btn-default', changeButtonStatus)
                    );
                }
            });
            ol.control.Control.call(this, {
                element: element,
                target: options.target
            });
        };
        ol.inherits(layerChangeControl, ol.control.Control);

        
        function createStyle(src, img) {
            return new ol.style.Style({
                image: new ol.style.Icon(/** @type {olx.style.IconOptions} */({
                    anchor: [0.5, 0.96],
                    crossOrigin: 'anonymous',
                    src: src,
                    img: img,
                    imgSize: img ? [img.width, img.height] : undefined
                }))
            });
        }
        var fc = ol.proj.fromLonLat([config.center.lon, config.center.lat]);
        var iconFeature = new ol.Feature(new ol.geom.Point(fc));
        iconFeature.set('style', createStyle(window.appRoot.full + '/Content/geo/img/icon.png', undefined));
        //iconFeature.set('style', createStyle('https://openlayers.org/en/v4.6.4/examples/data/icon.png', undefined));
        var vectorLayer = new ol.layer.Vector({
            style: function (feature) {
                return feature.get('style');
            },
            source: new ol.source.Vector({ features: [iconFeature] })
        })
        
        

        var map = new ol.Map({
            controls: ol.control.defaults({
                attribution: false
            }).extend([
                new layerChangeControl()
            ]),
            target: config.target,
            interactions: ol.interaction.defaults({
                doubleClickZoom: false // 將預設雙擊 zoom function 關閉
            }),
            layers: [
                tgosLayer,
                nlscLayer,
                orthoLayer,
                osmLayer,
                vectorLayer
            ],
            view: new ol.View({

                center: ol.proj.fromLonLat([config.center.lon, config.center.lat]),
                //center: [config.center.lon, config.center.lat],
                zoom: config.center.zoom
            })
        });




        function createOsmLayer(url, visible) {
            url = url || 'http://{a-c}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png';

            return new ol.layer.Tile({
                visible: visible,
                source: new ol.source.OSM({
                    url: url
                })
            })
        }
        function extend(a, b) {
            for (var key in b)
                if (b.hasOwnProperty(key))
                    a[key] = b[key];
            return a;
        }

        function mapConfigSetup() {
            var epsg = 'EPSG:3857';
            var projection = ol.proj.get(epsg);

            //[-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244]
            var projectionExtent = projection.getExtent();

            // 156543.03392804097
            var size = ol.extent.getWidth(projectionExtent) / 256;

            //[156543.03392804097, 78271.51696402048, 39135.75848201024, 19567.87924100512, 9783.93962050256, 4891.96981025128, 2445.98490512564, 1222.99245256282, 611.49622628141, 305.748113140705, 152.8740565703525, 76.43702828517625, 38.21851414258813, 19.109257071294063, 9.554628535647032, 4.777314267823516, 2.388657133911758, 1.194328566955879, 0.5971642834779395, 0.29858214173896974]
            var resolutions = new Array(20);

            //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
            var matrixIds = new Array(20);

            for (var z = 0; z < 20; ++z) {
                resolutions[z] = size / Math.pow(2, z);
                matrixIds[z] = z;
            }

            return {
                epsg: epsg,
                center: {
                    lon: 120.314736,
                    lat: 23.311684,
                    zoom: 15
                },
                target: "map",
                projection: projection,
                projectionExtent: projectionExtent,
                resolutions: resolutions,
                matrixIds: matrixIds,
                mapUrl: {
                    tgos: 'http://api.tgos.nat.gov.tw/TileAgent/TGOSMAP_W.aspx/GetCacheImage?APPID=x+JLVSx85Lk=&APIKEY=in8W74q0ogpcfW/STwicK8D5QwCdddJf05/7nb+OtDh8R99YN3T0LurV4xato3TpL/fOfylvJ9Wv/khZEsXEWxsBmg+GEj4AuokiNXCh14Rei21U5GtJpIkO++Mq3AguFK/ISDEWn4hMzqgrkxNe1Q==&L=0',
                    //nlsc: 'http://maps.nlsc.gov.tw/S_Maps/wmts'
                    nlsc: 'http://wmts.nlsc.gov.tw/wmts'
                }
            };
        }
        function createXyzLayer(name, visible, tileUrlFunction) {
            var layer = new ol.layer.Tile({
                name: name,
                visible: visible,
                extent: config.projectionExtent,
                source: new ol.source.XYZ({
                    crossOrigin: 'anonymous',
                    tileUrlFunction: tileUrlFunction
                })
            });
            return layer;
        }
        function tgosTileUrlFunction(tileCoord) {
            //var p = "&X=" + tileCoord[1] + "&Y=" + (-(tileCoord[2]) - 1) + "&S=" + (20 - tileCoord[0] - 1);
            //return mapConfig.mapUrl.tgos + p;
            var p = 'http://api.tgos.nat.gov.tw/TileAgent/TGOSMAP_W.aspx/GetCacheImage?APPID=x+JLVSx85Lk=&APIKEY=in8W74q0ogpcfW/STwicK8D5QwCdddJf05/7nb+OtDh8R99YN3T0LurV4xato3TpL/fOfylvJ9Wv/khZEsXEWxsBmg+GEj4AuokiNXCh14Rei21U5GtJpIkO++Mq3AguFK/ISDEWn4hMzqgrkxNe1Q==&L=0'
        + '&X=' + tileCoord[1] + '&Y=' + tileCoord[2] + '&S=' + (20 - tileCoord[0] - 1);
            return p;
        }
        function createWmtsLayer(name, url, visible, layerName) {
            var layer = new ol.layer.Tile({
                name: name,
                opacity: 1,
                extent: config.projectionExtent,
                visible: visible,
                source: new ol.source.WMTS({
                    //crossOrigin: 'anonymous',
                    url: url,
                    matrixSet: "EPSG:3857",
                    format: "image/png",
                    projection: config.projection,
                    tileGrid: new ol.tilegrid.WMTS({
                        origin: ol.extent.getTopLeft(config.projectionExtent),
                        resolutions: config.resolutions,
                        matrixIds: config.matrixIds
                    }),
                    layer: layerName
                })
            });
            return layer;
        }


        fusion.olmap = map;
        fusion.theMarker = iconFeature;
        return fusion;
    }

    window.MapFusion = MapFusion;

})();
